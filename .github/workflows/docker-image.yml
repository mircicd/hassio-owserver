name: Docker Image CI

on:
  release:
    types:
      - published
      - edited

jobs:
  information:
    name: Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.information.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2
      - name: üöÄ Run add-on information
        id: information
        uses: frenck/action-addon-information@v1
        with:
          path: "./"
      - name: ‚ÑπÔ∏è Gather version
        id: release
        run: |
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
          fi

          echo "::set-output name=version::${version}"

  deploy:
    name: Build and deploy ${{ matrix.architecture }}
    needs:
      - information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up build cache
        id: cache
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.docker-cache
          key: docker-${{ github.ref }}-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ github.ref }}-${{ matrix.architecture }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.0.1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
      - name: Compose build flags
        id: flags
        run: |
          echo "::set-output name=date::$(date +"%Y-%m-%dT%H:%M:%SZ")"
          from=$(jq --raw-output ".build_from.${{ matrix.architecture }}" "${{ needs.information.outputs.build }}")
          echo "::set-output name=from::${from}"
          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "::set-output name=platform::linux/amd64"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "::set-output name=platform::linux/386"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "::set-output name=platform::linux/arm/v6"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "::set-output name=platform::linux/arm/v7"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "::set-output name=platform::linux/arm64/v8"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push
        uses: docker/build-push-action@v2.2.2
        with:
          push: true
          tags: |
            ghcr.io/mircicd/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.version }}
          context: ${{ needs.information.outputs.target }}
          file: ${{ needs.information.outputs.target }}/Dockerfile
          cache-from: |
            ghcr.io/mircicd/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:cache
          cache-to: |
            ghcr.io/mircicd/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:cache
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_NAME=${{ needs.information.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}
